"""init

Revision ID: c05514599a5a
Revises: 
Create Date: 2024-02-18 12:19:56.503875

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic.migration import MigrationContext


# revision identifiers, used by Alembic.
revision: str = "c05514599a5a"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("contacts") as batch_op:
        # Check if first_name column exists before adding it
        columns = batch_op.get_columns("contacts")
        has_first_name = any(column.name == "first_name" for column in columns)

        if not has_first_name:
            batch_op.add_column(sa.Column("first_name", sa.String(), nullable=True))

    # Create an intermediate step to avoid circular dependency
    with op.batch_alter_table("contacts") as batch_op:
        batch_op.add_column(
            sa.Column(
                "birthday",
                sa.DateTime(timezone=True),
                server_default=sa.text("(CURRENT_TIMESTAMP)"),
                nullable=True,
            )
        )
        batch_op.create_index(
            op.f("contacts_birthday"), "contacts", ["birthday"], unique=False
        )

    # Continue with other modifications
    with op.batch_alter_table("contacts") as batch_op:
        batch_op.drop_index("contacts_name")
        batch_op.create_index(op.f("contacts_email"), ["email"], unique=False)
        batch_op.create_index(op.f("contacts_first_name"), ["first_name"], unique=False)
        batch_op.create_index(op.f("contacts_last_name"), ["last_name"], unique=False)
        batch_op.drop_column("name")
        batch_op.drop_column("phone")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("contacts") as batch_op:
        batch_op.add_column(sa.Column("name", sa.String(), nullable=True))

    # Create an intermediate step to avoid circular dependency during downgrade
    with op.batch_alter_table("contacts") as batch_op:
        batch_op.add_column(sa.Column("phone", sa.String(), nullable=True))
        batch_op.create_index(op.f("contacts_name"), "contacts", ["name"], unique=False)

    # Continue with other modifications
    with op.batch_alter_table("contacts") as batch_op:
        batch_op.drop_index(op.f("contacts_email"))
        batch_op.drop_index(op.f("contacts_first_name"))
        batch_op.drop_index(op.f("contacts_last_name"))
        batch_op.create_index("contacts_name", ["name"], unique=False)
        batch_op.drop_column("birthday")
        batch_op.drop_column("phone_number")
        batch_op.drop_column("last_name")
        batch_op.drop_column("first_name")

    # ### end Alembic commands ###
